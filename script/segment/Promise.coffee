# Promise类 - CoffeeScript实现
# 这个实现提供了JavaScript Promise的基本功能

Promise = ->
  Native 'class Promise {'
  Native '    __New(executor) {'
  Native '        this.state := "pending"'
  Native '        this.value := ""'
  Native '        this.handlers := []'
  Native '        '
  Native '        if (executor) {'
  Native '            try {'
  Native '                resolve := ObjBindMethod(this, "resolve")'
  Native '                reject := ObjBindMethod(this, "reject")'
  Native '                executor.Call(resolve, reject)'
  Native '            } catch e {'
  Native '                this.reject(e)'
  Native '            }'
  Native '        }'
  Native '    }'
  Native '    '
  Native '    resolve(value) {'
  Native '        if (this.state = "pending") {'
  Native '            this.state := "fulfilled"'
  Native '            this.value := value'
  Native '            this.executeHandlers()'
  Native '        }'
  Native '    }'
  Native '    '
  Native '    reject(reason) {'
  Native '        if (this.state = "pending") {'
  Native '            this.state := "rejected"'
  Native '            this.value := reason'
  Native '            this.executeHandlers()'
  Native '        }'
  Native '    }'
  Native '    '
  Native '    then(onFulfilled := "", onRejected := "") {'
  Native '        promise := new Promise()'
  Native '        '
  Native '        handler := {'
  Native '            onFulfilled: onFulfilled,'
  Native '            onRejected: onRejected,'
  Native '            promise: promise'
  Native '        }'
  Native '        '
  Native '        this.handlers.Push(handler)'
  Native '        '
  Native '        if (this.state != "pending") {'
  Native '            this.executeHandlers()'
  Native '        }'
  Native '        '
  Native '        return promise'
  Native '    }'
  Native '    '
  Native '    catch(onRejected) {'
  Native '        return this.then("", onRejected)'
  Native '    }'
  Native '    '
  Native '    finally(onFinally) {'
  Native '        return this.then('
  Native '            Func("__promise_finally_fulfilled").Bind(onFinally),'
  Native '            Func("__promise_finally_rejected").Bind(onFinally)'
  Native '        )'
  Native '    }'
  Native '    '
  Native '    executeHandlers() {'
  Native '        for index, handler in this.handlers {'
  Native '            this.executeHandler(handler)'
  Native '        }'
  Native '        this.handlers := []'
  Native '    }'
  Native '    '
  Native '    executeHandler(handler) {'
  Native '        try {'
  Native '            if (this.state = "fulfilled") {'
  Native '                if (handler.onFulfilled && IsFunc(handler.onFulfilled)) {'
  Native '                    result := handler.onFulfilled.Call(this.value)'
  Native '                    handler.promise.resolve(result)'
  Native '                } else {'
  Native '                    handler.promise.resolve(this.value)'
  Native '                }'
  Native '            } else if (this.state = "rejected") {'
  Native '                if (handler.onRejected && IsFunc(handler.onRejected)) {'
  Native '                    result := handler.onRejected.Call(this.value)'
  Native '                    handler.promise.resolve(result)'
  Native '                } else {'
  Native '                    handler.promise.reject(this.value)'
  Native '                }'
  Native '            }'
  Native '        } catch e {'
  Native '            handler.promise.reject(e)'
  Native '        }'
  Native '    }'
  Native '    '
  Native '    static resolve(value) {'
  Native '        promise := new Promise()'
  Native '        promise.resolve(value)'
  Native '        return promise'
  Native '    }'
  Native '    '
  Native '    static reject(reason) {'
  Native '        promise := new Promise()'
  Native '        promise.reject(reason)'
  Native '        return promise'
  Native '    }'
  Native '    '
  Native '    static all(promises) {'
  Native '        if (!promises || !promises.Length()) {'
  Native '            return Promise.resolve([])'
  Native '        }'
  Native '        '
  Native '        return new Promise(Func("__promise_all_executor").Bind(promises))'
  Native '    }'
  Native '    '
  Native '    static race(promises) {'
  Native '        if (!promises || !promises.Length()) {'
  Native '            return new Promise()'
  Native '        }'
  Native '        '
  Native '        return new Promise(Func("__promise_race_executor").Bind(promises))'
  Native '    }'
  Native '    '
  Native '    static allSettled(promises) {'
  Native '        if (!promises || !promises.Length()) {'
  Native '            return Promise.resolve([])'
  Native '        }'
  Native '        '
  Native '        return new Promise(Func("__promise_allSettled_executor").Bind(promises))'
  Native '    }'
  Native '}'
  Native ''
  Native '__promise_all_executor(promises, resolve, reject) {'
  Native '    results := []'
  Native '    completed := 0'
  Native '    total := promises.Length()'
  Native '    '
  Native '    for index, promise in promises {'
  Native '        allFulfilled := Func("__promise_all_fulfilled")'
  Native '        promise.then('
  Native '            allFulfilled.Bind(results, index, resolve, reject, completed, total),'
  Native '            reject'
  Native '        )'
  Native '    }'
  Native '}'
  Native ''
  Native '__promise_all_fulfilled(results, index, resolve, reject, ByRef completed, total, value) {'
  Native '    results[index] := value'
  Native '    completed++'
  Native '    if (completed = total) {'
  Native '        resolve.Call(results)'
  Native '    }'
  Native '}'
  Native ''
  Native '__promise_race_executor(promises, resolve, reject) {'
  Native '    for index, promise in promises {'
  Native '        promise.then(resolve, reject)'
  Native '    }'
  Native '}'
  Native ''
  Native '__promise_allSettled_executor(promises, resolve, reject) {'
  Native '    results := []'
  Native '    completed := 0'
  Native '    total := promises.Length()'
  Native '    '
  Native '    for index, promise in promises {'
  Native '        fulfilledFn := Func("__promise_allSettled_fulfilled")'
  Native '        rejectedFn := Func("__promise_allSettled_rejected")'
  Native '        promise.then('
  Native '            fulfilledFn.Bind(results, index, resolve, completed, total),'
  Native '            rejectedFn.Bind(results, index, resolve, completed, total)'
  Native '        )'
  Native '    }'
  Native '}'
  Native ''
  Native '__promise_allSettled_fulfilled(results, index, resolve, ByRef completed, total, value) {'
  Native '    results[index] := {status: "fulfilled", value: value}'
  Native '    completed++'
  Native '    if (completed = total) {'
  Native '        resolve.Call(results)'
  Native '    }'
  Native '}'
  Native ''
  Native '__promise_allSettled_rejected(results, index, resolve, ByRef completed, total, reason) {'
  Native '    results[index] := {status: "rejected", reason: reason}'
  Native '    completed++'
  Native '    if (completed = total) {'
  Native '        resolve.Call(results)'
  Native '    }'
  Native '}'
  Native ''
  Native '__promise_finally_fulfilled(onFinally, value) {'
  Native '    if (onFinally && IsFunc(onFinally)) {'
  Native '        onFinally.Call()'
  Native '    }'
  Native '    return value'
  Native '}'
  Native ''
  Native '__promise_finally_rejected(onFinally, reason) {'
  Native '    if (onFinally && IsFunc(onFinally)) {'
  Native '        onFinally.Call()'
  Native '    }'
  Native '    throw reason'
  Native '}'
  Native ''
  Native 'await(promise) {'
  Native '    if (!promise || !IsObject(promise)) {'
  Native '        return promise'
  Native '    }'
  Native '    '
  Native '    if (promise.state = "fulfilled") {'
  Native '        return promise.value'
  Native '    }'
  Native '    '
  Native '    if (promise.state = "rejected") {'
  Native '        throw promise.value'
  Native '    }'
  Native '    '
  Native '    while (promise.state = "pending") {'
  Native '        continue'
  Native '    }'
  Native '    '
  Native '    if (promise.state = "fulfilled") {'
  Native '        return promise.value'
  Native '    } else {'
  Native '        throw promise.value'
  Native '    }'
  Native '}'

Promise()
