; Generated by Coffee-AHK/0.0.60

global fetchData := Func("ahk_11").Bind(httpGet)
global processData := Func("ahk_10").Bind(fetch, err, console)
global delay := Func("ahk_9").Bind(setTimeout)
global loadAllData := Func("ahk_7")
global pipeline := Func("ahk_6").Bind(console)
global complexWorkflow := Func("ahk_1").Bind(err, console)
ahk_1(err, console) {
  try {
    userData := await fetchData.Call()
    processedData := await processData.Call("/transform", userData)
    __array__ := await Promise.all.Call([processData.Call("/save", processedData), processData.Call("/backup", processedData), delay.Call(500)])
    result1 := __array__[1]
    result2 := __array__[2]
    result3 := __array__[3]
    finalResult := await processData.Call("/finalize", {result1: result1, result2: result2})
    return finalResult
  } catch err {
    console.error.Call("Workflow failed:", err)
    throw err
  }
}
ahk_2(console) {
  return console.log.Call("Pipeline complete")
}
ahk_3(console, err) {
  console.error.Call("Pipeline failed:", err)
  return ""
}
ahk_4(console, result) {
  console.log.Call("Processed:", result)
  return result
}
ahk_5(console, data) {
  console.log.Call("Got data:", data)
  return processData.Call("/api/process", {method: "POST", body: JSON.stringify.Call(data)})
}
ahk_6(console) {
  return fetchData.Call().then.Call(Func("ahk_5").Bind(console)).then.Call(Func("ahk_4").Bind(console)).catch.Call(Func("ahk_3").Bind(console)).finally.Call(Func("ahk_2").Bind(console))
}
ahk_7() {
  return Promise.all.Call([fetchData.Call(), delay.Call(1000), processData.Call("/api/users", {method: "GET"})])
}
ahk_8(setTimeout, ms, resolve) {
  return setTimeout.Call(resolve, ms)
}
ahk_9(setTimeout, ms) {
  return new Promise(Func("ahk_8").Bind(setTimeout, ms))
}
ahk_10(fetch, err, console, url, options) {
  try {
    response := await fetch.Call(url, options)
    result := await response.json.Call()
    return result
  } catch err {
    console.error.Call("Failed to process:", err)
    throw err
  }
}
ahk_11(httpGet) {
  data := await httpGet.Call("api/data")
  return JSON.parse.Call(data)
}
