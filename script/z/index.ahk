; Generated by Coffee-AHK/0.0.41
class Promise {
  __New(executor) {
    this.status := "pending"
    this.value := ""
    this.reason := ""
    this.listCallbackResolved := []
    this.listCallbackRejected := []
    resolve := Func("ahk_11").Bind(this)
    reject := Func("ahk_10").Bind(this)
    executor.Call(resolve, reject)
  }
  then := Func("ahk_9").Bind(error).Bind(this)
  catch := Func("ahk_5").Bind(this)
}
(Func("ahk_4")).Call()
ahk_1(value) {
  MsgBox, % value
}
ahk_2(resolve) {
  resolve.Call("hello")
}
ahk_3(resolve) {
  fn := Func("ahk_2").Bind(resolve)
  SetTimer, % fn, -1000
}
ahk_4() {
  new Promise(Func("ahk_3")).then.Call(Func("ahk_1"))
}
ahk_5(this, rejectFn) {
  return this.then.Call("", rejectFn)
}
ahk_6(onRejected, resolve, reject, error, reason) {
  try {
    x := onRejected.Call(reason)
    if (x.__class == "Promise") {
      x.then.Call(resolve, reject)
    } else {
      resolve.Call(x)
    }
  } catch error {
    reject.Call(error)
  }
}
ahk_7(onFulfilled, resolve, reject, error, value) {
  try {
    x := onFulfilled.Call(value)
    if (x.__class == "Promise") {
      x.then.Call(resolve, reject)
    } else {
      resolve.Call(x)
    }
  } catch error {
    reject.Call(error)
  }
}
ahk_8(onFulfilled, error, onRejected, resolve, reject) {
  resolveFn := Func("ahk_7").Bind(onFulfilled, resolve, reject, error)
  rejectFn := Func("ahk_6").Bind(onRejected, resolve, reject, error)
  switch this.status {
    case "pending": {
      this.listCallbackResolved.Push(resolveFn)
      this.listCallbackRejected.Push(rejectFn)
    }
    case "fulfilled": {
      resolveFn.Call(this.value)
    }
    case "rejected": {
      rejectFn.Call(this.reason)
    }
  }
}
ahk_9(error, this, onFulfilled, onRejected) {
  return new Promise(Func("ahk_8").Bind(onFulfilled, error, onRejected))
}
ahk_10(this, reason) {
  if !(this.status == "pending") {
    return
  }
  this.status := "rejected"
  this.reason := reason
  for __index_for__, callback in this.listCallbackRejected {
    callback.Call(reason)
  }
}
ahk_11(this, value) {
  if !(this.status == "pending") {
    return
  }
  this.status := "fulfilled"
  this.value := value
  for __index_for__, callback in this.listCallbackResolved {
    callback.Call(value)
  }
}
